{"ast":null,"code":"var _jsxFileName = \"/home/adityadev/Code/MERN/client/src/pages/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { GET_POSTS_SERVICE } from \"../api/service\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Posts = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const data = useSelector(state => {\n    var _state$authReducer;\n\n    return (_state$authReducer = state.authReducer) === null || _state$authReducer === void 0 ? void 0 : _state$authReducer.user;\n  });\n  console.log(data);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const res = await GET_POSTS_SERVICE();\n        setPosts(res.data);\n        console.log(res);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), posts.map(post => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.user === (data === null || data === void 0 ? void 0 : data._id) ? \"Can delete\" : \"Cannot delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true);\n    })]\n  }, void 0, true);\n};\n\n_s(Posts, \"Dj7CyhUJQ9hEo1BhU/ztuPGKusE=\", false, function () {\n  return [useSelector];\n});\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/home/adityadev/Code/MERN/client/src/pages/Posts.js"],"names":["React","useEffect","useState","GET_POSTS_SERVICE","useSelector","Link","Posts","posts","setPosts","data","state","authReducer","user","console","log","fetchPosts","res","error","map","post","content","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,IAAT,QAAqB,kBAArB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMO,IAAI,GAAGL,WAAW,CAAEM,KAAD;AAAA;;AAAA,iCAAWA,KAAK,CAACC,WAAjB,uDAAW,mBAAmBC,IAA9B;AAAA,GAAD,CAAxB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,cAAMC,GAAG,GAAG,MAAMb,iBAAiB,EAAnC;AACAK,QAAAA,QAAQ,CAACQ,GAAG,CAACP,IAAL,CAAR;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,OAJD,CAIE,OAAOC,KAAP,EAAc;AACdJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF,KARD;;AASAF,IAAAA,UAAU;AACX,GAXQ,EAWN,EAXM,CAAT;AAYA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGR,KAAK,CAACW,GAAN,CAAWC,IAAD,IAAU;AACnB,0BACE;AAAA,gCACE;AAAA,oBAAIA,IAAI,CAACC;AAAT;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAID,IAAI,CAACP,IAAL,MAAcH,IAAd,aAAcA,IAAd,uBAAcA,IAAI,CAAEY,GAApB,IAA0B,YAA1B,GAAyC;AAA7C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,sBADF;AAMD,KAPA,CAFH;AAAA,kBADF;AAaD,CA7BD;;GAAMf,K;UAESF,W;;;KAFTE,K;AA+BN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { GET_POSTS_SERVICE } from \"../api/service\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const data = useSelector((state) => state.authReducer?.user);\n  console.log(data);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const res = await GET_POSTS_SERVICE();\n        setPosts(res.data);\n        console.log(res);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchPosts();\n  }, []);\n  return (\n    <>\n      <h1>posts</h1>\n      {posts.map((post) => {\n        return (\n          <>\n            <p>{post.content}</p>\n            <p>{post.user === data?._id ? \"Can delete\" : \"Cannot delete\"}</p>\n          </>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}